name: CI

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
  workflow_dispatch:
    inputs:
      submodule_sha:
        description: "Specific SHA for mmCoreAndDevices submodule (optional)"
        required: false
        type: string
  repository_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest, macos-13]

    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
      - name: build
        run: uv run --no-dev --group build fetch.py --build --sha ${{ github.event.inputs.submodule_sha || 'main' }}

      - run: uv run pytest -v

      # Package the adapters directory into a single .zip
      - name: Package adapters (Unix)
        if: runner.os != 'Windows'
        run: |
          cd src/mm_test_adapters/libs
          zip -r ../../../mm-test-adapters-${{ runner.os }}-${{ runner.arch }}.zip .
      - name: Package adapters (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Compress-Archive -Path src/mm_test_adapters/libs/* -DestinationPath mm-test-adapters-${{ runner.os }}-${{ runner.arch }}.zip

      - uses: actions/upload-artifact@v4
        with:
          name: mm-test-adapters-${{ runner.os }}-${{ runner.arch }}
          path: mm-test-adapters-${{ runner.os }}-${{ runner.arch }}.zip

  build-sdist:
    runs-on: ubuntu-latest
    env:
      MM_SHA: ${{ github.event.inputs.submodule_sha || 'main' }}
    steps:
      - uses: actions/checkout@v5
      - uses: hynek/build-and-inspect-python-package@v2
        with:
          skip-wheel: true

  build-wheels:
    name: ${{ matrix.os }} wheel
    runs-on: ${{ matrix.os }}
    env:
      MM_SHA: ${{ github.event.inputs.submodule_sha || 'main' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]
    steps:
      - uses: actions/checkout@5
      - uses: astral-sh/setup-uv@v6
      - name: Build wheels via cibuildwheel
        uses: pypa/cibuildwheel@v3.1

      - name: Upload wheels artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ runner.os }}-${{ runner.arch }}
          path: ./wheelhouse/*.whl

  publish-to-pypi:
    name: Publish to PyPI
    needs: [build-sdist, build-wheels]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Get sdist
        uses: actions/download-artifact@v5
        with:
          name: Packages
          path: dist
      - name: Get wheels
        uses: actions/download-artifact@v5
        with:
          pattern: cibw-wheels-*
          path: dist
          merge-multiple: true

      - name: ðŸš¢ Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  create-github-release:
    name: Create Release
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: astral-sh/setup-uv@v6
      - name: Compute release tag
        id: tag
        run: |
          release_tag=$(uv run fetch.py --sha ${{ github.event.inputs.submodule_sha || 'main' }})
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*.zip
          tag_name: ${{ steps.tag.outputs.release_tag }}
          name: ${{ steps.tag.outputs.release_name }}
          draft: false
          prerelease: false
